{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","current","Date","toLocaleDateString","useState","header","headertwo","headers","setHeaders","patientName","address","age","date","patientInputs","setPatientInputs","doctorName","prc","ptr","doctorInputs","setDoctorInputs","disabledBtn","setDisabledBtn","headerChangeHandler","e","value","target","name","patientChangeHandler","doctorChangeHandler","useEffect","doctorinfo","JSON","parse","window","localStorage","getItem","className","id","type","placeholder","onChange","htmlFor","aria-describedby","row","encType","event","files","parentDiv","document","getElementById","img","previewImage","reader","FileReader","addEventListener","this","result","setItem","image","Image","setAttribute","src","append","alert","readAsDataURL","contains","outerHTML","console","log","onClick","stringify","removeItem","htmlToImage","toJpeg","quality","then","dataUrl","link","createElement","download","href","click","disabled","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.517ea8e9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React, { useState, useEffect } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport AutosizeInput from 'react-input-autosize';\nimport htmlToImage from 'html-to-image';\n\nfunction App() {\n  let newDate = new Date();\n  let current = newDate.toLocaleDateString()\n  \n  let [headers, setHeaders] = useState({\n    header:\"\",\n    headertwo:\"\"\n  })\n  let [patientInputs, setPatientInputs] = useState({\n    patientName:\"\",\n    address:\"\",\n    age:\"\",\n    date: current\n  })\n  let [doctorInputs, setDoctorInputs] = useState({\n    doctorName:\"\",\n    prc:\"\",\n    ptr:\"\"\n  })\n  let [disabledBtn, setDisabledBtn] = useState(true);\n\n  useEffect(() => {\n    let doctorinfo = JSON.parse(window.localStorage.getItem(\"doctorInputs\"))\n    if(doctorinfo !== null){ \n      setDoctorInputs(doctorinfo)\n    }\n  }, []);\n \n  \n\n function uploadImage(event) {\n    // window.localStorage.clear()\n    // event.target.value = null;\n      var name = event.target.files[0].name;\n      var parentDiv = document.getElementById('preview');\n      var img = document.getElementById(\"img\");\n\n      function previewImage(){\n        var reader = new FileReader();\n        reader.addEventListener(\"load\", function () {\n          if (this.result && localStorage) {\n              window.localStorage.setItem(name, this.result);\n              var image = new Image();\n              image.setAttribute('id', 'img');\n              image.src = window.localStorage.getItem(name);\n              parentDiv.append(image);\n          } else {\n            alert();\n          }\n        });\n        reader.readAsDataURL(event.target.files[0]);\n      }\n    if(parentDiv.contains(img) === false){\n        previewImage();\n    } else if(parentDiv.contains(img)){\n      img.outerHTML= \"\";\n      previewImage();\n     \n    }\n\n      console.log(name);\n      console.log(event.target.files[0]);\n  }\n\n  function generatePrescription(){\n    htmlToImage.toJpeg(document.getElementById('fullPrescription'), { quality: 1 })\n      .then(function (dataUrl) {\n      var link = document.createElement('a');\n      link.download = 'Rx-' + patientInputs.patientName + '-name.jpeg';\n      link.href = dataUrl;\n      link.click();\n    });\n  }\n\n   function headerChangeHandler(e){\n    let value = e.target.value;\n    setHeaders({\n      ...headers,\n      [e.target.name]: value\n    })\n  }\n\n  function patientChangeHandler(e){\n    let value = e.target.value;\n    setPatientInputs({\n      ...patientInputs,\n      [e.target.name]: value\n    })\n  }\n\n  function doctorChangeHandler(e){\n    let value = e.target.value;\n    setDoctorInputs({\n      ...doctorInputs,\n      [e.target.name]: value\n    })\n  }\n\n  function DeleteImage(name){\n    alert(name)\n    window.localStorage.removeItem(name);\n  }\n  \n  function saveDoctorInfo(){\n     window.localStorage.setItem(\"doctorInputs\", JSON.stringify(doctorInputs));\n     alert(\"Doctor's information saved\")\n  }\n\n  function clearDoctorInfo(){\n    window.localStorage.removeItem(\"doctorInputs\")\n    setDoctorInputs({\n      doctorName:\"\",\n      prc:\"\",\n      ptr:\"\"})\n    alert(\"Doctor's information cleared\")\n  }\n\n  function download(){\n    if(headers.header !== \"\" && headers.headertwo !== \"\"\n        && patientInputs.patientName !== \"\" && patientInputs.address !== \"\"\n        && patientInputs.age !== \"\" && patientInputs.date !==\"\"\n        && doctorInputs.doctorName !== \"\" && doctorInputs.prc !== \"\"\n        && doctorInputs.ptr !== \"\"){\n      if(disabledBtn){\n        setDisabledBtn(false);\n      }\n    } else{\n        if(!disabledBtn){\n          setDisabledBtn(true);\n        }\n      } \n    }\n\n  download();\n\n  return (\n    <div className=\"App\">\n      \n      <div className=\"landing pt-2\">\n        <div className=\"row\">\n          <div className=\"col-12 col-md-12 col-lg-6\">\n            <form className=\"form white-containers\" id=\"fullPrescription\">\n              <div className=\"form-group\">\n                <AutosizeInput type=\"text\" \n                                  placeholder=\"Practice Name\" \n                                  className=\"form-control header-group\" \n                                  id=\"header\"\n                                  onChange={headerChangeHandler}\n                                  name=\"header\"\n                                  value={headers.header}/>\n               \n              </div>\n\n              <div className=\"form-group\">\n                <AutosizeInput type=\"text\" \n                                  placeholder=\"Practice Details\"\n                                  className=\"form-control header-group\" \n                                  id=\"header-two\"\n                                  onChange={headerChangeHandler}\n                                  name=\"headertwo\"\n                                  value={headers.headertwo}/>\n               \n              </div>\n              <hr/>\n\n              <div className=\"row\">\n                <div className=\"col-8 col-md-8\">\n                  <div className=\"form-group-patient form-inline\">\n                    <label className=\"mb-0\" htmlFor=\"patientName\">Patient Name:</label>\n                    <AutosizeInput type=\"text\" \n                                      placeholder=\"Type here\" \n                                      className=\"form-control col-4 col-md-8\" \n                                      id=\"patientName\"\n                                      onChange = {patientChangeHandler}\n                                      name=\"patientName\"\n                                      value= {patientInputs.patientName}/>   \n                  </div>\n                  <div className=\"form-group-patient form-inline\">\n                    <label className=\"mb-0\" htmlFor=\"address\">Address:</label>\n                    <AutosizeInput type=\"text\" \n                                      placeholder=\"Type here\" \n                                      className=\"form-control col-4 col-md-8\" \n                                      id=\"address\"\n                                      onChange = {patientChangeHandler}\n                                      name=\"address\"\n                                      value= {patientInputs.address}\n                                      aria-describedby=\"address\"/>\n                  </div>\n                </div>\n              \n                <div className=\"col-4\">\n                  <div className=\"form-group-patient form-inline\">\n                    <label className=\"mb-0\" htmlFor=\"age\">Age:</label>\n                    <AutosizeInput type=\"text\" \n                            placeholder=\"Type here\" \n                            className=\"form-control col-8\" \n                            id=\"age\"\n                            onChange = {patientChangeHandler}\n                            name=\"age\"\n                            value= {patientInputs.age}\n                            aria-describedby=\"age\"/>\n                  </div>\n\n                  <div className=\"form-group-patient form-inline\">\n                    <label className=\"mb-0\" htmlFor=\"date\">Date:</label>\n                      <AutosizeInput type=\"text\" \n                            placeholder=\"Header\" \n                            className=\"form-control col-8\" \n                            id=\"date\"\n                            onChange = {patientChangeHandler}\n                            name=\"date\"\n                            value= {patientInputs.date}\n                            aria-describedby=\"date\"/>\n                  </div>\n                </div>\n              </div>\n              \n              <p className=\"rx\">Rx</p>\n\n              <div className=\"form-group\">\n                <textarea type=\"text\" className=\"form-control\" id=\"textarea\" aria-describedby=\"textarea\" row=\"6\"></textarea>\n                         \n              </div>\n              <div className=\"row doctor-row\">\n                <div className=\"col-5\"></div>\n                <div className=\"col-7\">\n                    <div className=\"form-group-doctor form-inline d-flex justify-content-end\">\n                      <div id=\"preview\"></div>\n                      <AutosizeInput type=\"text\" \n                              placeholder=\"Doctor's Name\" \n                              id=\"doctor\"\n                              name=\"doctorName\"\n                              value={doctorInputs.doctorName}\n                              onChange={doctorChangeHandler}/>\n                     \n                    </div>\n\n                    <div className=\"form-group-doctor form-inline d-flex justify-content-end\">\n                      <label className=\"license m-0\" htmlFor=\"prc\">PRC:</label>\n                      <AutosizeInput type=\"text\" \n                                    placeholder=\"PRC number\"\n                                    name=\"prc\"\n                                    value={doctorInputs.prc}\n                                    onChange={doctorChangeHandler}\n                                    id=\"prc\"/>\n                     \n                    </div>\n                    <div className=\"form-group-doctor form-inline d-flex justify-content-end\">\n                      <label className=\"license m-0\" htmlFor=\"PTR\">PTR:</label>\n                      <AutosizeInput type=\"text\" \n                              placeholder=\"PTR number\" \n                              name=\"ptr\"\n                              value={doctorInputs.ptr}\n                              onChange={doctorChangeHandler} \n                              id=\"ptr\"/>\n                     \n                    </div>\n\n                </div>\n              </div>\n            </form> \n          </div>\n          <div className=\"right-div col-12 col-md-12 col-lg-6 text-center p-5\">\n            <h4 className=\"white wd-100 text-center\">Upload your signature here</h4>\n            <div id=\"signatureUploader\" className=\"text-dark container white-containers\">\n              <form encType=\"multipart/form-data\">\n                <div id=\"file-sig-div\">\n                  <i id=\"file-sig\" className=\"fas fa-file-signature fa-4x\"></i> \n                  <div>\n                  <p id=\"namefile\">Only pictures allowed.</p> \n                  <p id=\"subnamefile\">(e.g. jpg ,jpeg, png)</p>\n                  </div>\n                </div>\n                <input id=\"file-input\" type=\"file\" onChange={uploadImage}/>\n                \n                <hr/>\n                <div className=\"btn-div\">\n                  <button id=\"btn-savedr\" className=\"btn text-white\" onClick={saveDoctorInfo}>\n                  Save Doctor's Info\n                  </button>\n                  <button id=\"btn-cleardr\" className=\"btn\" onClick={clearDoctorInfo}>\n                    Clear Doctor's Info\n                  </button>    \n                </div>\n              </form>\n            </div>\n            <h4 className=\"white wd-100 text-center pt-3\">Done writing your prescription?</h4>\n            <div id=\"saveRx\" className=\"text-dark container p-4 white-containers\">\n              <p id=\"notice\">If you cannot click the download button, you might be missing some details on your prescription. Please check.</p>\n              <hr/>\n              <button id=\"btn-dl\" \n                      className=\"btn text-white\" \n                      onClick={generatePrescription}\n                      disabled={disabledBtn} \n                      type=\"button\">\n                Ready to Download!\n              </button> \n            </div>\n\n          </div> \n                      <footer>\n              <small>&copy; 2020 gonzalesgonzalez</small>\n    \n            </footer>  \n        </div>  \n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}