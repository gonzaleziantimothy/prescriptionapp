{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar getBlobFromURL_1 = __importDefault(require(\"./getBlobFromURL\"));\n\nvar utils_1 = require(\"./utils\");\n\nvar URL_REGEX = /url\\((['\"]?)([^'\"]+?)\\1\\)/g;\n\nfunction resolveUrl(url, baseUrl) {\n  // url is absolute already\n  if (url.match(/^[a-z]+:\\/\\//i)) {\n    return url;\n  } // url is absolute already, without protocol\n\n\n  if (url.match(/^\\/\\//)) {\n    return window.location.protocol + url;\n  } // dataURI, mailto:, tel:, etc.\n\n\n  if (url.match(/^[a-z]+:/i)) {\n    return url;\n  }\n\n  var doc = document.implementation.createHTMLDocument();\n  var base = doc.createElement('base');\n  var a = doc.createElement('a');\n  doc.head.appendChild(base);\n  doc.body.appendChild(a);\n\n  if (baseUrl) {\n    base.href = baseUrl;\n  }\n\n  a.href = url;\n  return a.href;\n}\n\nfunction escape(url) {\n  return url.replace(/([.*+?^${}()|\\[\\]\\/\\\\])/g, '\\\\$1');\n}\n\nfunction urlToRegex(url) {\n  return new RegExp(\"(url\\\\(['\\\"]?)(\" + escape(url) + \")(['\\\"]?\\\\))\", 'g');\n}\n\nfunction parseURLs(str) {\n  var result = [];\n  str.replace(URL_REGEX, function (raw, quotation, url) {\n    result.push(url);\n    return raw;\n  });\n  return result.filter(function (url) {\n    return !utils_1.isDataUrl(url);\n  });\n}\n\nfunction embed(cssString, resourceURL, baseURL, options) {\n  var resolvedURL = baseURL ? resolveUrl(resourceURL, baseURL) : resourceURL;\n  return Promise.resolve(resolvedURL).then(function (url) {\n    return getBlobFromURL_1.default(url, options);\n  }).then(function (data) {\n    return utils_1.toDataURL(data, utils_1.getMimeType(resourceURL));\n  }).then(function (dataURL) {\n    return cssString.replace(urlToRegex(resourceURL), \"$1\" + dataURL + \"$3\");\n  }).then(function (content) {\n    return content;\n  }, function () {\n    return resolvedURL;\n  });\n}\n\nfunction shouldEmbed(string) {\n  return string.search(URL_REGEX) !== -1;\n}\n\nexports.shouldEmbed = shouldEmbed;\n\nfunction embedResources(cssString, baseUrl, options) {\n  if (!shouldEmbed(cssString)) {\n    return Promise.resolve(cssString);\n  }\n\n  return Promise.resolve(cssString).then(parseURLs).then(function (urls) {\n    return urls.reduce(function (done, url) {\n      return done.then(function (ret) {\n        return embed(ret, url, baseUrl, options);\n      });\n    }, Promise.resolve(cssString));\n  });\n}\n\nexports.default = embedResources;","map":null,"metadata":{},"sourceType":"script"}