{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar cloneNode_1 = __importDefault(require(\"./cloneNode\"));\n\nvar embedWebFonts_1 = __importDefault(require(\"./embedWebFonts\"));\n\nvar embedImages_1 = __importDefault(require(\"./embedImages\"));\n\nvar createSvgDataURL_1 = __importDefault(require(\"./createSvgDataURL\"));\n\nvar applyStyleWithOptions_1 = __importDefault(require(\"./applyStyleWithOptions\"));\n\nvar utils_1 = require(\"./utils\");\n\nfunction getImageSize(domNode, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var width = options.width || utils_1.getNodeWidth(domNode);\n  var height = options.height || utils_1.getNodeHeight(domNode);\n  return {\n    width: width,\n    height: height\n  };\n}\n\nfunction toSvgDataURL(domNode, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _a = getImageSize(domNode, options),\n      width = _a.width,\n      height = _a.height;\n\n  return cloneNode_1.default(domNode, options.filter, true).then(function (clonedNode) {\n    return embedWebFonts_1.default(clonedNode, options);\n  }).then(function (clonedNode) {\n    return embedImages_1.default(clonedNode, options);\n  }).then(function (clonedNode) {\n    return applyStyleWithOptions_1.default(clonedNode, options);\n  }).then(function (clonedNode) {\n    return createSvgDataURL_1.default(clonedNode, width, height);\n  });\n}\n\nexports.toSvgDataURL = toSvgDataURL;\n\nfunction toCanvas(domNode, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return toSvgDataURL(domNode, options).then(utils_1.createImage).then(utils_1.delay(100)).then(function (image) {\n    var canvas = document.createElement('canvas');\n    var context = canvas.getContext('2d');\n    var ratio = utils_1.getPixelRatio();\n\n    var _a = getImageSize(domNode, options),\n        width = _a.width,\n        height = _a.height;\n\n    canvas.width = width * ratio;\n    canvas.height = height * ratio;\n    canvas.style.width = \"\" + width;\n    canvas.style.height = \"\" + height;\n    context.scale(ratio, ratio);\n\n    if (options.backgroundColor) {\n      context.fillStyle = options.backgroundColor;\n      context.fillRect(0, 0, canvas.width, canvas.height);\n    }\n\n    context.drawImage(image, 0, 0);\n    return canvas;\n  });\n}\n\nexports.toCanvas = toCanvas;\n\nfunction toPixelData(domNode, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _a = getImageSize(domNode, options),\n      width = _a.width,\n      height = _a.height;\n\n  return toCanvas(domNode, options).then(function (canvas) {\n    return canvas.getContext('2d').getImageData(0, 0, width, height).data;\n  });\n}\n\nexports.toPixelData = toPixelData;\n\nfunction toPng(domNode, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return toCanvas(domNode, options).then(function (canvas) {\n    return canvas.toDataURL();\n  });\n}\n\nexports.toPng = toPng;\n\nfunction toJpeg(domNode, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return toCanvas(domNode, options).then(function (canvas) {\n    return canvas.toDataURL('image/jpeg', options.quality || 1);\n  });\n}\n\nexports.toJpeg = toJpeg;\n\nfunction toBlob(domNode, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  return toCanvas(domNode, options).then(utils_1.canvasToBlob);\n}\n\nexports.toBlob = toBlob;\nexports.default = {\n  toSvgDataURL: toSvgDataURL,\n  toCanvas: toCanvas,\n  toPixelData: toPixelData,\n  toPng: toPng,\n  toJpeg: toJpeg,\n  toBlob: toBlob\n};","map":null,"metadata":{},"sourceType":"script"}