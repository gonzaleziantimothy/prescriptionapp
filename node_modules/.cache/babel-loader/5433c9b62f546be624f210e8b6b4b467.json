{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar WOFF = 'application/font-woff';\nvar JPEG = 'image/jpeg';\nvar mimes = {\n  woff: WOFF,\n  woff2: WOFF,\n  ttf: 'application/font-truetype',\n  eot: 'application/vnd.ms-fontobject',\n  png: 'image/png',\n  jpg: JPEG,\n  jpeg: JPEG,\n  gif: 'image/gif',\n  tiff: 'image/tiff',\n  svg: 'image/svg+xml'\n};\n\nexports.uuid = function uuid() {\n  // generate uuid for className of pseudo elements.\n  // We should not use GUIDs, otherwise pseudo elements sometimes cannot be captured.\n  var counter = 0; // ref: http://stackoverflow.com/a/6248722/2519373\n\n  var randomFourChars = function randomFourChars() {\n    return (\"0000\" + (Math.random() * Math.pow(36, 4) << 0).toString(36)).slice(-4);\n  };\n\n  return function () {\n    counter += 1;\n    return \"u\" + randomFourChars() + counter;\n  };\n}();\n\nfunction parseExtension(url) {\n  var match = /\\.([^./]*?)$/g.exec(url);\n  if (match) return match[1];\n  return '';\n}\n\nexports.parseExtension = parseExtension;\n\nfunction getMimeType(url) {\n  var ext = parseExtension(url).toLowerCase();\n  return mimes[ext] || '';\n}\n\nexports.getMimeType = getMimeType;\n\nfunction delay(ms) {\n  return function (args) {\n    return new Promise(function (resolve) {\n      setTimeout(function () {\n        resolve(args);\n      }, ms);\n    });\n  };\n}\n\nexports.delay = delay;\n\nfunction createImage(url) {\n  return new Promise(function (resolve, reject) {\n    var image = new Image();\n\n    image.onload = function () {\n      resolve(image);\n    };\n\n    image.onerror = reject;\n    image.crossOrigin = 'anonymous';\n    image.src = url;\n  });\n}\n\nexports.createImage = createImage;\n\nfunction isDataUrl(url) {\n  return url.search(/^(data:)/) !== -1;\n}\n\nexports.isDataUrl = isDataUrl;\n\nfunction toDataURL(content, mimeType) {\n  return \"data:\" + mimeType + \";base64,\" + content;\n}\n\nexports.toDataURL = toDataURL;\n\nfunction getDataURLContent(dataURL) {\n  return dataURL.split(/,/)[1];\n}\n\nexports.getDataURLContent = getDataURLContent;\n\nfunction toBlob(canvas) {\n  return new Promise(function (resolve) {\n    var binaryString = window.atob(canvas.toDataURL().split(',')[1]);\n    var len = binaryString.length;\n    var binaryArray = new Uint8Array(len);\n\n    for (var i = 0; i < len; i += 1) {\n      binaryArray[i] = binaryString.charCodeAt(i);\n    }\n\n    resolve(new Blob([binaryArray], {\n      type: 'image/png'\n    }));\n  });\n}\n\nfunction canvasToBlob(canvas) {\n  if (canvas.toBlob) {\n    return new Promise(function (resolve) {\n      canvas.toBlob(resolve);\n    });\n  }\n\n  return toBlob(canvas);\n}\n\nexports.canvasToBlob = canvasToBlob;\n\nfunction toArray(arrayLike) {\n  var arr = [];\n\n  for (var i = 0, l = arrayLike.length; i < l; i += 1) {\n    arr.push(arrayLike[i]);\n  }\n\n  return arr;\n}\n\nexports.toArray = toArray;\n\nfunction px(node, styleProperty) {\n  var value = window.getComputedStyle(node).getPropertyValue(styleProperty);\n  return parseFloat(value.replace('px', ''));\n}\n\nfunction getNodeWidth(node) {\n  var leftBorder = px(node, 'border-left-width');\n  var rightBorder = px(node, 'border-right-width');\n  return node.scrollWidth + leftBorder + rightBorder;\n}\n\nexports.getNodeWidth = getNodeWidth;\n\nfunction getNodeHeight(node) {\n  var topBorder = px(node, 'border-top-width');\n  var bottomBorder = px(node, 'border-bottom-width');\n  return node.scrollHeight + topBorder + bottomBorder;\n}\n\nexports.getNodeHeight = getNodeHeight;\n\nfunction getPixelRatio() {\n  return window.devicePixelRatio || 1;\n}\n\nexports.getPixelRatio = getPixelRatio;\n\nfunction svgToDataURL(svg) {\n  return Promise.resolve().then(function () {\n    return new XMLSerializer().serializeToString(svg);\n  }).then(encodeURIComponent).then(function (html) {\n    return \"data:image/svg+xml;charset=utf-8,\" + html;\n  });\n}\n\nexports.svgToDataURL = svgToDataURL;\n\nfunction getBlobFromImageURL(url) {\n  return createImage(url).then(function (image) {\n    var width = image.width,\n        height = image.height;\n    var canvas = document.createElement('canvas');\n    var context = canvas.getContext('2d');\n    var ratio = getPixelRatio();\n    canvas.width = width * ratio;\n    canvas.height = height * ratio;\n    canvas.style.width = \"\" + width;\n    canvas.style.height = \"\" + height;\n    context.scale(ratio, ratio);\n    context.drawImage(image, 0, 0);\n    var dataURL = canvas.toDataURL(getMimeType(url));\n    return getDataURLContent(dataURL);\n  });\n}\n\nexports.getBlobFromImageURL = getBlobFromImageURL;","map":null,"metadata":{},"sourceType":"script"}