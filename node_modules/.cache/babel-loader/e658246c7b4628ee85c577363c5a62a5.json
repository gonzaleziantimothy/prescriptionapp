{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar utils_1 = require(\"./utils\");\n\nvar getBlobFromURL_1 = __importDefault(require(\"./getBlobFromURL\"));\n\nvar embedResources_1 = __importDefault(require(\"./embedResources\"));\n\nfunction embedBackground(clonedNode, options) {\n  var background = clonedNode.style.getPropertyValue('background');\n\n  if (!background) {\n    return Promise.resolve(clonedNode);\n  }\n\n  return Promise.resolve(background).then(function (cssString) {\n    return embedResources_1.default(cssString, null, options);\n  }).then(function (cssString) {\n    clonedNode.style.setProperty('background', cssString, clonedNode.style.getPropertyPriority('background'));\n    return clonedNode;\n  });\n}\n\nfunction embedImageNode(clonedNode, options) {\n  if (!(clonedNode instanceof HTMLImageElement) || utils_1.isDataUrl(clonedNode.src)) {\n    return Promise.resolve(clonedNode);\n  }\n\n  return Promise.resolve(clonedNode.src).then(function (url) {\n    return getBlobFromURL_1.default(url, options);\n  }).then(function (data) {\n    return utils_1.toDataURL(data, utils_1.getMimeType(clonedNode.src));\n  }).then(function (dataURL) {\n    return new Promise(function (resolve, reject) {\n      clonedNode.onload = resolve;\n      clonedNode.onerror = reject;\n      clonedNode.src = dataURL;\n    });\n  }).then(function () {\n    return clonedNode;\n  }, function () {\n    return clonedNode;\n  });\n}\n\nfunction embedChildren(clonedNode, options) {\n  var children = utils_1.toArray(clonedNode.childNodes);\n  var deferreds = children.map(function (child) {\n    return embedImages(child, options);\n  });\n  return Promise.all(deferreds).then(function () {\n    return clonedNode;\n  });\n}\n\nfunction embedImages(clonedNode, options) {\n  if (!(clonedNode instanceof Element)) {\n    return Promise.resolve(clonedNode);\n  }\n\n  return Promise.resolve(clonedNode).then(function (node) {\n    return embedBackground(node, options);\n  }).then(function (node) {\n    return embedImageNode(node, options);\n  }).then(function (node) {\n    return embedChildren(node, options);\n  });\n}\n\nexports.default = embedImages;","map":null,"metadata":{},"sourceType":"script"}