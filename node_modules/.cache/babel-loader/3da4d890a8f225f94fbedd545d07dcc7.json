{"ast":null,"code":"\"use strict\";\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  }\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar utils_1 = require(\"./utils\");\n\nvar embedResources_1 = __importStar(require(\"./embedResources\"));\n\nfunction parseCSS(source) {\n  if (source === undefined) {\n    return [];\n  }\n\n  var cssText = source;\n  var css = [];\n  var cssKeyframeRegex = '((@.*?keyframes [\\\\s\\\\S]*?){([\\\\s\\\\S]*?}\\\\s*?)})';\n  var combinedCSSRegex = '((\\\\s*?(?:\\\\/\\\\*[\\\\s\\\\S]*?\\\\*\\\\/)?\\\\s*?@media[\\\\s\\\\S]' + '*?){([\\\\s\\\\S]*?)}\\\\s*?})|(([\\\\s\\\\S]*?){([\\\\s\\\\S]*?)})'; // to match css & media queries together\n\n  var cssCommentsRegex = new RegExp('(\\\\/\\\\*[\\\\s\\\\S]*?\\\\*\\\\/)', 'gi'); // strip out comments\n\n  cssText = cssText.replace(cssCommentsRegex, '');\n  var keyframesRegex = new RegExp(cssKeyframeRegex, 'gi');\n  var arr;\n\n  while (true) {\n    arr = keyframesRegex.exec(cssText);\n\n    if (arr === null) {\n      break;\n    }\n\n    css.push(arr[0]);\n  }\n\n  cssText = cssText.replace(keyframesRegex, ''); // unified regex\n\n  var unified = new RegExp(combinedCSSRegex, 'gi');\n\n  while (true) {\n    arr = unified.exec(cssText);\n\n    if (arr === null) {\n      break;\n    }\n\n    css.push(arr[0]);\n  }\n\n  return css;\n}\n\nfunction fetchCSS(url, sheet) {\n  return fetch(url).then(function (res) {\n    return {\n      url: url,\n      cssText: res.text()\n    };\n  }, function (e) {\n    console.log('ERROR FETCHING CSS: ', e.toString());\n  });\n}\n\nfunction embedFonts(data) {\n  return data.cssText.then(function (resolved) {\n    var cssText = resolved;\n    var fontLocations = cssText.match(/url\\([^)]+\\)/g) || [];\n    var fontLoadedPromises = fontLocations.map(function (location) {\n      var url = location.replace(/url\\(([^]+)\\)/g, '$1');\n\n      if (!url.startsWith('https://')) {\n        var source = data.url;\n        url = new URL(url, source).href;\n      }\n\n      return new Promise(function (resolve, reject) {\n        fetch(url).then(function (res) {\n          return res.blob();\n        }).then(function (blob) {\n          var reader = new FileReader();\n          reader.addEventListener('load', function (res) {\n            // Side Effect\n            cssText = cssText.replace(location, \"url(\" + reader.result + \")\");\n            resolve([location, reader.result]);\n          });\n          reader.readAsDataURL(blob);\n        }).catch(reject);\n      });\n    });\n    return Promise.all(fontLoadedPromises).then(function () {\n      return cssText;\n    });\n  });\n}\n\nfunction getCssRules(styleSheets) {\n  var ret = [];\n  var promises = []; // First loop inlines imports\n\n  styleSheets.forEach(function (sheet) {\n    if ('cssRules' in sheet) {\n      try {\n        utils_1.toArray(sheet.cssRules).forEach(function (item) {\n          if (item.type === CSSRule.IMPORT_RULE) {\n            promises.push(fetchCSS(item.href, sheet).then(embedFonts).then(function (cssText) {\n              var parsed = parseCSS(cssText);\n              parsed.forEach(function (rule) {\n                sheet.insertRule(rule, sheet.cssRules.length);\n              });\n            }).catch(function (e) {\n              console.log('Error loading remote css', e.toString());\n            }));\n          }\n        });\n      } catch (e) {\n        var inline_1 = styleSheets.find(function (a) {\n          return a.href === null;\n        }) || document.styleSheets[0];\n\n        if (sheet.href != null) {\n          promises.push(fetchCSS(sheet.href, inline_1).then(embedFonts).then(function (cssText) {\n            var parsed = parseCSS(cssText);\n            parsed.forEach(function (rule) {\n              inline_1.insertRule(rule, sheet.cssRules.length);\n            });\n          }).catch(function (e) {\n            console.log('Error loading remote stylesheet', e.toString());\n          }));\n        }\n\n        console.log('Error inlining remote css file', e.toString());\n      }\n    }\n  });\n  return Promise.all(promises).then(function () {\n    // Second loop parses rules\n    styleSheets.forEach(function (sheet) {\n      if ('cssRules' in sheet) {\n        try {\n          utils_1.toArray(sheet.cssRules).forEach(function (item) {\n            ret.push(item);\n          });\n        } catch (e) {\n          console.log(\"Error while reading CSS rules from \" + sheet.href, e.toString());\n        }\n      }\n    });\n    return ret;\n  });\n}\n\nfunction getWebFontRules(cssRules) {\n  return cssRules.filter(function (rule) {\n    return rule.type === CSSRule.FONT_FACE_RULE;\n  }).filter(function (rule) {\n    return embedResources_1.shouldEmbed(rule.style.getPropertyValue('src'));\n  });\n}\n\nfunction parseWebFontRules(clonedNode) {\n  return new Promise(function (resolve, reject) {\n    if (!clonedNode.ownerDocument) {\n      reject(new Error('Provided element is not within a Document'));\n    }\n\n    resolve(utils_1.toArray(clonedNode.ownerDocument.styleSheets));\n  }).then(getCssRules).then(getWebFontRules);\n}\n\nexports.parseWebFontRules = parseWebFontRules;\n\nfunction embedWebFonts(clonedNode, options) {\n  return parseWebFontRules(clonedNode).then(function (rules) {\n    return Promise.all(rules.map(function (rule) {\n      var baseUrl = rule.parentStyleSheet ? rule.parentStyleSheet.href : null;\n      return embedResources_1.default(rule.cssText, baseUrl, options);\n    }));\n  }).then(function (cssStrings) {\n    return cssStrings.join('\\n');\n  }).then(function (cssString) {\n    var styleNode = document.createElement('style');\n    var sytleContent = document.createTextNode(cssString);\n    styleNode.appendChild(sytleContent);\n\n    if (clonedNode.firstChild) {\n      clonedNode.insertBefore(styleNode, clonedNode.firstChild);\n    } else {\n      clonedNode.appendChild(styleNode);\n    }\n\n    return clonedNode;\n  });\n}\n\nexports.default = embedWebFonts;","map":null,"metadata":{},"sourceType":"script"}